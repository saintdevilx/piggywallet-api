"""
Django settings for mpw project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from django.core.exceptions import ImproperlyConfigured

from mpw.redisify import redisify

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!z%l8iow3l+rcf1x6xvo9cx0+uz2dy$b(i-n9p&*^gzqexrh)v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', False)

ALLOWED_HOSTS = ["*"]


def get_from_environment(var_name, fail_silently=False):
    try:
        var = os.environ[var_name]
        return var
    except KeyError:
        if fail_silently:
            return ''
        raise ImproperlyConfigured(var_name + " variable not found in the environment.")


def env_var_exists(var_name):
    return os.environ.get(var_name)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'api.phone_auth',
    'api.user',
    'api.saving_goal',
    'corsheaders',
    'api.payment',
    'api.aspiration',
    'api.fcm_django',
    'storages',
    'notifications',
    'djcelery',
    'django_celery_beat',
    'emailtemplates',
    'api.reward'
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mpw.StandardExceptionMiddleware.StandardExceptionMiddleware'
]


CORS_ORIGIN_WHITELIST =[
    'http://localhost:4200','http://192.168.43.165:4200','http://192.168.2.9:4200','http://192.168.43.165:3000'
]

ROOT_URLCONF = 'mpw.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mpw.wsgi.application'


# This Logging needs to be used while ON_PRDOCTION = True
import sys
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(pathname)s] [%(filename)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'detail': {
            'format': "[%(levelname)s(%(name)s): %(asctime)s] \nPath: %(pathname)s |Function: %(funcName)s |Line: %(lineno)s \nMessage: %(message)s \n",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'exceptionformat': {
            'format': "[EXCEPTION: %(asctime)s] \n%(message)s \n",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'mail_admins': {
            'class': 'django.utils.log.AdminEmailHandler',
            'level': 'ERROR',
            # But the emails are plain text by default - HTML is nicer
            'include_html': True,
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'alllogs.log',
            'formatter': 'verbose'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'detail',
        },
        'exceptionconsole': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'exceptionformat',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console', 'mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django': {
            'handlers': ['file'],
            'propagate': False,
            'level': 'DEBUG',
        },
        'application': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'celerylog': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'exception': {
            'handlers': ['exceptionconsole'],
            'level': 'ERROR',
        }
    }
}


CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'
CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'

ADMINS = ['diablox133@gmail.com']
# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Authentication backend
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    #'api.phone_auth.backends.firebase_authentication.FirebaseAuthentication',
    'api.phone_auth.backends.phone_backend.PhoneBackend',
]

REST_FRAMEWORK = {
   'DEFAULT_AUTHENTICATION_CLASSES': (
       'rest_framework.authentication.TokenAuthentication',
   ),
   'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
   ),
   "PAGE_SIZE": 10
}

# Phone login settings
PHONE_LOGIN_ATTEMPTS = 10
PHONE_LOGIN_OTP_LENGTH = 6
PHONE_LOGIN_OTP_HASH_ALGORITHM = 'sha256'
 # will include otp in generate response, default is False.

# Configure the SENDSMS_BACKEND (for django-sendsms integration)
#

MSG91_AUTHKEY = get_from_environment('MSG91_AUTH_KEY')


AUTH_USER_MODEL = 'user.User'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# PAYMENT GATEWAY
# PAYMENT GATEWAY
PAYMENT_GATEWAY_API_URL = 'https://test.cashfree.com/'
PAYMENT_GATEWAY_FORM_URL = 'https://test.cashfree.com/billpay/checkout/post/submit'

CASHFREE_MERCHANT_NAME = 'Mypiggywallet'
VIRTUAL_ACCOUNT_ENABLED = env_var_exists('VIRTUAL_ACCOUNT_ENABLED')

SITE_DOMAIN = get_from_environment('SITE_DOMAIN')

FRONTEND_DOMAIN = get_from_environment('FRONTEND_DOMAIN')

BACKEND_DOMAIN = get_from_environment('BACKEND_DOMAIN')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
# ]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

AWS_ACCESS_KEY_ID = get_from_environment('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = get_from_environment('AWS_SECRET_KEY')
AWS_STORAGE_BUCKET_NAME = get_from_environment('AWS_BUCKET_NAME')
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
DEFAULT_FILE_STORAGE = 'mpw.storage_backend.MediaStorage'

MEDIA_URL = F'https://{AWS_S3_CUSTOM_DOMAIN}/'

ON_PRODUCTION = 'PRODUCTION' in os.environ

redis_url = os.getenv('REDISTOGO_URL', 'redis://localhost:6379')
CACHES = redisify(default='redis://localhost')


FIREBASE_CONFIG = {k.replace('firebase_',''):v.replace('\\n','\n') for k,v in os.environ.items()
                   if k.startswith('firebase')}

FIREBASE_AUTH_TOKEN_FIELD = 'idToken'
FIREBASE_CHECK_JWT_REVOKED = True
FIREBASE_AUTH_EMAIL_VERIFICATION = False
FIREBASE_WEB_KEY = "AIzaSyBXSbDhGWcaTHgrqqG98C79QdusAbWrhCo"
FIREBASE_DYNAMIC_LINK_API_URL = F"https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key={FIREBASE_WEB_KEY}"

FCM_DJANGO_SETTINGS = {
        "FCM_SERVER_KEY": get_from_environment('FCM_SERVER_KEY')
}

ANDROID_APP_HASH_CODE = get_from_environment('ANDROID_APP_HASH')

PAYTM_MERCHANT_ID = get_from_environment('PAYTM_MERCHANT_ID')
PAYTM_MERCHANT_KEY = get_from_environment('PAYTM_MERCHANT_KEY')
PAYTM_WEBSITE= get_from_environment('PAYTM_WEBSITE')
PAYTM_INDUSTRY_TYPE_ID = os.getenv('PAYTM_INDUSTRY_TYPE_ID', 'Retail')
PAYTM_MERCHANT_UPI = get_from_environment('PAYTM_MERCHANT_UPI')
PAYTM_MERCHANT_CODE = get_from_environment('PAYTM_MERCHANT_CODE')
PAYTM_MERCHANT_NAME = get_from_environment('PAYTM_MERCHANT_NAME')


EMAIL_HOST = get_from_environment('EMAIL_HOST')
EMAIL_HOST_PASSWORD = get_from_environment('EMAIL_HOST_PASSWORD')
EMAIL_HOST_USER = get_from_environment('EMAIL_HOST_USER')
EMAIL_PORT = int(get_from_environment('EMAIL_PORT'))
EMAIL_USE_TLS = get_from_environment('EMAIL_USE_TLS') or False


if 'PRODUCTION' in os.environ:
    from mpw.production_settings import *
elif "STAGING" in os.environ:
    from mpw.staging_settings import *
else:
    try:
        from mpw.localised_settings import *
    except:
        pass


