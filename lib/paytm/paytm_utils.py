import json

import requests
from paytmpg import EChannelId, Money, EnumCurrency, UserInfo, PaymentDetailsBuilder, Payment, MerchantProperty, \
    LibraryConstants, PaymentMode, PaymentStatusDetailBuilder
from paytmpg.merchant.models.SDKResponse import SDKResponse
from paytmpg.pg.response.InitiateTransactionResponse import InitiateTransactionResponse
from paytmpg.pg.response.InitiateTransactionResponseBody import InitiateTransactionResponseBody

from lib.paytm import Checksum
from lib.utils import logger
from mpw import settings
import random


def initiate_transaction(user, transaction):
    """

    :param user:
    :param amount:
    :param transaction:
    :return:
    """
    channel_id = EChannelId.WAP
    order_id = transaction['order_id']
    txn_amount = Money(EnumCurrency.INR, str(transaction['amount']))
    user_info = UserInfo()
    user_info.set_cust_id(str(user.pk))
    MerchantProperty.logger = logger
    payment_details = PaymentDetailsBuilder(channel_id, order_id, txn_amount, user_info)
    payment_details.set_enable_payment_mode([PaymentMode('UPI'), PaymentMode('BALANCE')])
    payment_details = payment_details.build()
    print('payment modes.....\n\n\n', payment_details,'\n\n')
    response = Payment.createTxnToken(payment_details)
    token = response.get_response_object().get_body().get_txn_token()
    # get_payment_options(token, order_id)
    return token


def get_payment_status(order_id):
    status_detail = PaymentStatusDetailBuilder(order_id).build()
    response = Payment.getPaymentStatus(status_detail).get_response_object().get_body().__dict__
    logger.debug(response['resultInfo'])
    return response if response else None


def get_payment_options(token, order_id):

    # initialize a dictionary
    paytmParams = dict()

    # head parameters
    paytmParams["head"] = {
        # put transaction token here, this is same token which was generated by Initiate Transaction API
        "txnToken": str(token)
    }

    # prepare JSON string for request
    post_data = json.dumps(paytmParams)

    # for Staging
    #url = F"https://securegw-stage.paytm.in/fetchPaymentOptions?mid={settings.PAYTM_MERCHANT_ID}&orderId={order_id}"

    # for Production
    url = F"https://securegw.paytm.in/fetchPaymentOptions?mid={settings.PAYTM_MERCHANT_ID}&orderId={order_id}"

    response = requests.post(url, data=post_data, headers={"Content-type": "application/json"}).json()
    return response


def get_checksum(user, transaction, cb_url):

    payload = {
              "REQUEST_TYPE": 'DEFAULT',#LibraryConstants.REQUEST_TYPE_PAYMENT, # You would get this details from paytm after opening an account with them
              "MID": str(settings.PAYTM_MERCHANT_ID), # You would get this details from paytm after opening an account with them
              "ORDER_ID": transaction['order_id'], # Unique ID for each transaction. This info is for you to track the transaction details
              "CUST_ID": str(int(random.random()*10000)),#str(user.pk), # Unique ID for your customer
              "INDUSTRY_TYPE_ID": settings.PAYTM_INDUSTRY_TYPE_ID, # You would get this details from paytm after opening an account with them
              "CHANNEL_ID": "WAP", # You would get this details from paytm after opening an account with them
              "TXN_AMOUNT": str(transaction['amount']), # Transaction amount that has to be collected
              "WEBSITE": settings.PAYTM_WEBSITE, # You would get this details from paytm after opening an account with them
              "CALLBACK_URL": cb_url ,#MerchantProperty.get_callback_url(),#F'https://enuk9sn31xwc.x.pipedream.net/', # Callback url
              # "EMAIL": user.email, # Email of customer
              # "MOBILE_NO": user.get_phone_number(), # Mobile no of customer
              # "CHECKSUMHASH": checksum
              'PAYMENT_MODE_ONLY':'YES',
              'PAYMENT_TYPE_ID': 'UPI'
            }

    checksum = Checksum.generate_checksum(payload, settings.PAYTM_MERCHANT_KEY)
    print('verifying....\n', Checksum.verify_checksum(payload, settings.PAYTM_MERCHANT_KEY, checksum))
    payload["ENVIRONMENT"] = "staging"  # environment details. staging for test environment & production for live environment
    payload['CHECKSUMHASH'] = checksum
    return payload


def get_status_checksum(payload):
    return Checksum.generate_checksum(payload, settings.PAYTM_MERCHANT_KEY)


def verify_response_checksum(response):
    return Checksum.verify_checksum(response, settings.PAYTM_MERCHANT_KEY, response['CHECKSUMHASH'])


def process_payment(token, order_id, payment_mode='UPI'):
    # print('*-*'*50)
    # token = get_transaction_token(user, transaction)
    # print('*-*' * 50)
    # order_id = transaction['pk']
    paytmParams = dict()

    # body parameters
    paytmParams["body"] = {

        # the value will be NATIVE here
        "requestType": "NATIVE",

        # Find your MID in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
        "mid": settings.PAYTM_MERCHANT_ID,

        # Enter your unique order id
        "orderId": order_id,

        # enter payment mode used by customer for transaction
        "paymentMode": payment_mode,

        # # enter authentication mode for card
        # "authMode": "AUTH_MODE",
        "payerAccount": 'paytm-9706414@paytm',
        "channelCode": "UPIPUSH"
    }

    # head parameters
    paytmParams["head"] = {

        # put transaction token here, this is same token which was generated by Initiate Transaction API
        "txnToken": token,
        "channelId": "WAP"
    }

    # prepare JSON string for request
    post_data = json.dumps(paytmParams)

    # for Staging
    #url = "https://securegw-stage.paytm.in/theia/api/v1/processTransaction?mid=YOUR_MID_HERE&orderId=YOUR_ORDER_ID"

    # for Production
    url = F"https://securegw.paytm.in/theia/api/v1/processTransaction?mid={settings.PAYTM_MERCHANT_ID}&orderId={order_id}"
    logger.debug({'json':post_data, 'url':url})
    return requests.post(url, data=post_data, headers={"Content-type": "application/json"}).json()


def get_transaction_token(user, transaction):
    # initialize a dictionary
    paytmParams = dict()

    # body parameters
    paytmParams["body"] = {

        # for custom checkout value is 'Payment' and for intelligent router is 'UNI_PAY'
        "requestType": "Payment",

        # Find your MID in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
        "mid": settings.PAYTM_MERCHANT_ID,

        # Find your Website Name in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
        "websiteName": settings.PAYTM_WEBSITE,

        # Enter your unique order id
        "orderId": transaction['order_id'],

        # on completion of transaction, we will send you the response on this URL
        #"callbackUrl": MerchantProperty.get_callback_url(),
        "enablePaymentMode":[{"mode":"UPI", "channels": ["UPIPUSH"]}],

        # Order Transaction Amount here
        "txnAmount": {

            # Transaction Amount Value
            "value": transaction['amount'],

            # Transaction Amount Currency
            "currency": "INR",
        },

        # Customer Infomation here
        "userInfo": {

            # unique id that belongs to your customer
            "custId": user.pk,
            "channelId": "WAP"
        },
    }

    # Generate checksum by parameters we have in body
    # Find your Merchant Key in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
    checksum = Checksum.generate_checksum_by_str(json.dumps(paytmParams["body"]), settings.PAYTM_MERCHANT_KEY)

    # head parameters
    paytmParams["head"] = {

        # put generated checksum value here
        "signature": checksum
    }

    # prepare JSON string for request
    post_data = json.dumps(paytmParams)

    # for Staging
    # url = "https://securegw-stage.paytm.in/theia/api/v1/initiateTransaction?mid=YOUR_MID_HERE&orderId=YOUR_ORDER_ID"

    # for Production
    url = F"https://securegw.paytm.in/theia/api/v1/initiateTransaction?mid={settings.PAYTM_MERCHANT_ID}&orderId={transaction['order_id']}"

    res = requests.post(url, data=post_data, headers={"Content-type": "application/json"}).json()
    return res


def get_payment_status_2():
    # initialize a dictionary
    paytmParams = dict()

    # Find your MID in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
    paytmParams["MID"] = "YOUR_MID_HERE"

    # Enter your order id which needs to be check status for
    paytmParams["ORDERID"] = "YOUR_ORDER_ID"

    # Generate checksum by parameters we have
    # Find your Merchant Key in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
    checksum = Checksum.generate_checksum(paytmParams, "YOUR_KEY_HERE")

    # put generated checksum value here
    paytmParams["CHECKSUMHASH"] = checksum

    # prepare JSON string for request
    post_data = json.dumps(paytmParams)

    # for Staging
    url = "https://securegw-stage.paytm.in/order/status"

    # for Production
    # url = "https://securegw.paytm.in/order/status"

    response = requests.post(url, data=post_data, headers={"Content-type": "application/json"}).json()


def approve_withdraw_request(withdraw_request):
    assert withdraw_request.saving_goal.current_deposit >= withdraw_request.withdraw_amount
    paytmParams = dict()

    # Find Sub Wallet GUID in your Paytm Dashboard at https://dashboard.paytm.com
    paytmParams["subwalletGuid"] = "YOUR_SUBWALLET_GUID";

    # Enter your order id which needs to be check disbursal status for
    paytmParams["orderId"] = withdraw_request.transaction.order_id;

    # Enter Beneficiary Account Number in which the disbursal needs to be made
    paytmParams["beneficiaryAccount"] = withdraw_request.user_bank_account.account_no

    # Enter Beneficiary's Bank IFSC Code
    paytmParams["beneficiaryIFSC"] = withdraw_request.user_bank_account.ifsc_code

    # Amount in INR to transfer
    paytmParams["amount"] = withdraw_request.withdraw_amount

    # Enter Purpose of transfer, possible values are: SALARY_DISBURSEMENT, REIMBURSEMENT, BONUS, INCENTIVE, OTHER
    paytmParams["purpose"] = "OTHER";

    # Enter the date for which you wants to disburse the amount. Required if purpose is SALARY_DISBURSEMENT or REIMBURSEMENT
    #paytmParams["date"] = "YYYY-MM-DD";

    # prepare JSON string for request
    post_data = json.dumps(paytmParams);

    # Generate checksum by parameters we have
    # Find your Merchant Key in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys

    # Generate checksum by parameters we have in body
    # Find your Merchant Key in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
    checksum = Checksum.generate_checksum_by_str(post_data, settings.PAYTM_MERCHANT_KEY)

    # Find your MID in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys
    x_mid = settings.PAYTM_MERCHANT_ID

    # put generated checksum value here
    x_checksum = checksum

    # for Staging
    url = "https://staging-dashboard.paytm.com/bpay/api/v1/disburse/order/bank"

    # for Production
    # url = "https://dashboard.paytm.com/bpay/api/v1/disburse/order/bank"

    response = requests.post(url, data=post_data, headers={"Content-type": "application/json", "x-mid": x_mid,
                                                           "x-checksum": x_checksum}).json()
    return response